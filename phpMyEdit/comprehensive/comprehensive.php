<?php

/* Modify this array to get only particular subset from testing fields. */
$used_cols = array(
		'tinyint'   => 0,
		'smallint'  => 0,
		'mediumint' => 0,
		'int'       => 0,
		'bigint'    => 0,
		'float'     => 0,
		'decimal'   => 0,
		'datetime'  => 1,
		'timestamp' => 0,
		'char'      => 0,
		'text'      => 0,
		'enum'      => 1
		);

//   MySQL host name, user name, password, database, and table to edit
$opts["hn"]="localhost";
$opts["un"]="test";
$opts["pw"]="test";
$opts["db"]="test";
$opts["tb"]="comprehensive";

//  Name of field which is the unique key
$opts["key"]="xint";

//  Type of key field (int/real/string/date etc)
$opts["key_type"]="int";
// Initial field to sort on
$opts["sort_field"]="";

//   Number of records to display on the screen
// note that $inc = -1 lists _all_ records in a table
$opts['inc']= 15;

// Options you wish to give the users
// A(dd) C(hange) (co)P(y) V(iew) D(elete) F(ilter) I(nitial sort suppressed)
$opts['options']='ACPVDF';

// Number of lines to display on multiple selection filters
$opts['multiple']='4';

// Number of lines to display on multiple selection filters
#$opts['default_sort_columns'] = array('pushId','due','priority','task');

// action hyper'link's, 'button's, or 'graphic's
$opts['actionStyle']='button';
#$opts['actionStyle']='link';
#$opts['actionStyle']='graphic';

$opts['display_query']=true;
$opts['display_sort']=true;

/*
   Field definitions. Fields will be displayed left to right
   on the screen in the order in which they appear in this list.
   ['name'] is the title used for column headings, etc.;
   ['sort'] = true means the users may sort the display on this column;
   ['type'] is generated by SETUP.php and indicates the mysql field type
   best not edited
   ['maxlen'] maximum length to display add/edit/search input boxes
   ['trimlen'] maximum length of string content to display in row listing
   if strlen(value) > trimlen, display substr(,0,trimlen-3).'...'
   ['width'] is an optional display width specification for the column,
   e.g.  ['width'] = '100px';
   or $fdd['colname']['width'] = ($fdd['colname']['trimlen'] * 8).'px';
   ['nowrap'] true or false.  whether this field should get a NOWRAP
   ['mask'] a string that is used by sprintf() to format field output
   ['datemask'] a string that is used by date() to format date fields
   see PHP's date() for valid formatting characters
   ['daterange'] a  of numbers
   ['daterange']['start'] = 1996;
   ['daterange']['end']   = $fdd['colname']['daterange']['start']+20;
   ['URL'] is used to make a field 'clickable' in the display, e.g.:
   ['URL'] = 'mailto:' or ['URL'] = 'http://';
   ['URL'] = '$page?stuff';
   Note that the following are available as variables:
   $key   key field for record
   $name  name of the field
   $value value of the field
   $page  this HTML page
   $row   mysql_fetch_assoc() for this row
   ['required'] = true will generate javascript to prevent null entries by users
   ['options'] is an optional parameter to control whether a field is
   displayed in the A(dd), C(hange), D(elete), view, or L(ist) views
   ['options']='R' indicates that a field is read only
   ['options']='P' indicates that a field is a password field
   ['options']='H' indicates that a field is to be hidden
   and marked as hidden
   ['textarea']['rows'] and/or ['textarea']['cols'] specifies a
   textarea is to be used to give multi-line input,
   e.g. ['textarea']['rows'] = 5; ['textarea']['cols'] = 10
   ['values'] restricts user input to the specified constants,
   e.g. ['values'] = array('A','B','C')
   or   ['values'] = range(1,99);
   ['values']['table'] and ['values']['column'] restricts user
   input to the values found in the specified column of another table.
   The optional ['values']['description'] field allows the value(s) displayed
   to the user to be different to those in the ['values']['column'] field.
   This is useful for giving more meaning to column values.  There are two main
   options when using the ['values']['description'] field. These are whether you
   want to use a single, or multiple field in your description.  To apply single,
   you need to use:
   ['values']['description'] = 'desc_column'
   This may be used, with no other options, and will simply display the description
   for the corresponding value.
   For Multiple, use:
   ['values']['description']['columns']['1'] = 'desc_column_1'
   ['values']['description']['divs']['1']    = ' '
   ['values']['description']['columns']['2'] = 'desc_column_2'
   The 'div' component is what will be used as a divider between the columns
   in the display.  You don't need to define the last 'div' field if it isn't
   required.  So, for example...if you have a series of people in a
   table, with a separate column for id, first name, and last name, you could
use:
['values']['db']='mydb' *optional if table is in another database*
['values']['table']='mytable'
['values']['column']='id'
['values']['description']['columns']['1']='last_name'
['values']['description']['divs']['1']   =', '
['values']['description']['columns']['2']='first_name'
['values']['filters']='idcolumn in (1,2,3)' *optional WHERE clause*
['values']['orderby']='last_name' *optional ORDER BY clause*
if a column is either SET or ENUM type, then the values are put in 
by PME Setup.
['select'] = 'T/D/M' (text, drop-down, or multiple selection for filters)
if a column is a SET type, then this is automatically 'M'
Calculated Expressions
example:
$fdd['other']['name']='Col Header';
$fdd['other']['expression']='onHand-ordered';
$fdd['other']['sort']='T:!';
$fdd['other']['select']='T';
$fdd['other']['type']='int';
'other' can be anything, but needs to be unique within the list of $fdd keys
'expression' can be any valid MySQL expression
'type' should reflect the results of the expression, e.g. 'int' or 'string'
all other options work as with other, normal columns
this kind of column is always read-only
*/

/* This should be always enabled, cause it is primary key */
$fdd["xint"] = array(
		'name'=>'Xint',
		'select'=>'T',
		'type'=>'int',
		'maxlen'=>11,
		'nowrap'=>false,
		'required'=>true,
		'default'=>'0',
		'sort'=>true
		);

if ($used_cols['tinyint']) {

	$fdd["xtinyint"] = array(
			'name'=>'Xtinyint',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>4,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xtinyint_u"] = array(
			'name'=>'Xtinyint U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>3,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xtinyint_z"] = array(
			'name'=>'Xtinyint Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>3,
			'nowrap'=>false,
			'default'=>'000',
			'sort'=>true
			);

	$fdd["xtinyint_u_z"] = array(
			'name'=>'Xtinyint U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>3,
			'nowrap'=>false,
			'default'=>'000',
			'sort'=>true
			);
}

if ($used_cols['smallint']) {

	$fdd["xsmallint"] = array(
			'name'=>'Xsmallint',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>6,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xsmallint_u"] = array(
			'name'=>'Xsmallint U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>5,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xsmallint_z"] = array(
			'name'=>'Xsmallint Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>5,
			'nowrap'=>false,
			'default'=>'00000',
			'sort'=>true
			);

	$fdd["xsmallint_u_z"] = array(
			'name'=>'Xsmallint U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>5,
			'nowrap'=>false,
			'default'=>'00000',
			'sort'=>true
			);
}

if ($used_cols['mediumint']) {

	$fdd["xmediumint"] = array(
			'name'=>'Xmediumint',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>9,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xmediumint_u"] = array(
			'name'=>'Xmediumint U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>8,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xmediumint_z"] = array(
			'name'=>'Xmediumint Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>8,
			'nowrap'=>false,
			'default'=>'00000000',
			'sort'=>true
			);

	$fdd["xmediumint_u_z"] = array(
			'name'=>'Xmediumint U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>8,
			'nowrap'=>false,
			'default'=>'00000000',
			'sort'=>true
			);
}

if ($used_cols['int']) {

	$fdd["xint_u"] = array(
			'name'=>'Xint U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xint_z"] = array(
			'name'=>'Xint Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0000000000',
			'sort'=>true
			);

	$fdd["xint_u_z"] = array(
			'name'=>'Xint U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0000000000',
			'sort'=>true
			);

	$fdd["xinteger"] = array(
			'name'=>'Xinteger',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>11,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xinteger_u"] = array(
			'name'=>'Xinteger U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xinteger_z"] = array(
			'name'=>'Xinteger Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0000000000',
			'sort'=>true
			);

	$fdd["xinteger_u_z"] = array(
			'name'=>'Xinteger U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>10,
			'nowrap'=>false,
			'default'=>'0000000000',
			'sort'=>true
			);
}

if ($used_cols['int']) {

	$fdd["xbigint"] = array(
			'name'=>'Xbigint',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>20,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xbigint_u"] = array(
			'name'=>'Xbigint U',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>20,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xbigint_z"] = array(
			'name'=>'Xbigint Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>20,
			'nowrap'=>false,
			'default'=>'00000000000000000000',
			'sort'=>true
			);

	$fdd["xbigint_u_z"] = array(
			'name'=>'Xbigint U Z',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>20,
			'nowrap'=>false,
			'default'=>'00000000000000000000',
			'sort'=>true
			);
}

if ($used_cols['float']) {

	$fdd["xfloat1"] = array(
			'name'=>'Xfloat1',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>12,
			'nowrap'=>false,
			'default'=>'0',
			'sort'=>true
			);

	$fdd["xfloat1_z"] = array(
			'name'=>'Xfloat1 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>12,
			'nowrap'=>false,
			'default'=>'000000000000',
			'sort'=>true
			);

	$fdd["xfloat2"] = array(
			'name'=>'Xfloat2',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xfloat2_z"] = array(
			'name'=>'Xfloat2 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xdouble2"] = array(
			'name'=>'Xdouble2',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xdouble2_z"] = array(
			'name'=>'Xdouble2 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xreal2"] = array(
			'name'=>'Xreal2',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xreal2_z"] = array(
			'name'=>'Xreal2 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>26,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);
}

if ($used_cols['decimal']) {

	$fdd["xdecimal2"] = array(
			'name'=>'Xdecimal2',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>28,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xdecimal2_z"] = array(
			'name'=>'Xdecimal2 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>27,
			'nowrap'=>false,
			'default'=>'00.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xnumeric2"] = array(
			'name'=>'Xnumeric2',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>28,
			'nowrap'=>false,
			'default'=>'0.000000000000000000000000',
			'sort'=>true
			);

	$fdd["xnumeric2_z"] = array(
			'name'=>'Xnumeric2 Z',
			'select'=>'T',
			'type'=>'real',
			'maxlen'=>27,
			'nowrap'=>false,
			'default'=>'00.000000000000000000000000',
			'sort'=>true,
			'mask'=>'[[ %s ]]',
			);
}

if ($used_cols['datetime']) {

	$fdd["xdate"] = array(
			'name'=>'Xdate',
			'select'=>'T',
			'type'=>'date',
			'maxlen'=>10,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xdatetime"] = array(
			'name'=>'Xdatetime',
			'select'=>'T',
			'type'=>'datetime',
			'maxlen'=>19,
			'nowrap'=>false,
			'sort'=>true,
			//'datemask'=>'dmY',
			//'daterange'=>array('start'=>1996,'end'=>2002)
			'date'=>array(
				'sequence' => 'DMY',
				'label'=>array('month'=>'Month:'),
				'format'=>'H',
				'labeldivs'=>true,
				'skip'=>true,
				)
			);

	$fdd["xtime"] = array(
			'name'=>'Xtime',
			'select'=>'T',
			'type'=>'time',
			'maxlen'=>8,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xyear"] = array(
			'name'=>'Xyear',
			'select'=>'T',
			'type'=>'year',
			'maxlen'=>4,
			'nowrap'=>false,
			'sort'=>true
			);
}

if ($used_cols['timestamp']) {

	$fdd["xtimestamp2"] = array(
			'name'=>'Xtimestamp2',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>2,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp4"] = array(
			'name'=>'Xtimestamp4',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>4,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp6"] = array(
			'name'=>'Xtimestamp6',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>6,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp8"] = array(
			'name'=>'Xtimestamp8',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>8,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp10"] = array(
			'name'=>'Xtimestamp10',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>10,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp12"] = array(
			'name'=>'Xtimestamp12',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>12,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);

	$fdd["xtimestamp14"] = array(
			'name'=>'Xtimestamp14',
			'select'=>'T',
			'type'=>'timestamp',
			'maxlen'=>14,
			'nowrap'=>false,
			'required'=>true,
			'options'=>'R',
			'sort'=>true
			);
}

if ($used_cols['char']) {

	$fdd["xchar1"] = array(
			'name'=>'Xchar1',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>1,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xchar255"] = array(
			'name'=>'Xchar255',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>255,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xchar"] = array(
			'name'=>'Xchar',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>1,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xvarchar1"] = array(
			'name'=>'Xvarchar1',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>1,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xvarchar255"] = array(
			'name'=>'Xvarchar255',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>255,
			'nowrap'=>false,
			'sort'=>true
			);
}

if ($used_cols['text']) {
	$fdd["xtinytext"] = array(
			'name'=>'Xtinytext',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>255,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xblob"] = array(
			'name'=>'Xblob',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>65535,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xtext"] = array(
			'name'=>'Xtext',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>65535,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xmediumblob"] = array(
			'name'=>'Xmediumblob',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>16777215,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xmediumtext"] = array(
			'name'=>'Xmediumtext',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>16777215,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xlongblob"] = array(
			'name'=>'Xlongblob',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>16777215,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);

	$fdd["xlongtext"] = array(
			'name'=>'Xlongtext',
			'select'=>'T',
			'type'=>'blob',
			'maxlen'=>16777215,
			'nowrap'=>false,
			'textarea'=>array(
				'rows'=>5,
				'cols'=>50,
				'wrap'=>'virtual'
				),
			'sort'=>true
			);
}

if ($used_cols['enum']) {
	$fdd["xbit"] = array(
			'name'=>'Xbit',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>1,
			'nowrap'=>false,
			'sort'=>true
			);

	$fdd["xbool"] = array(
			'name'=>'Xbool',
			'select'=>'T',
			'type'=>'int',
			'maxlen'=>1,
			'nowrap'=>false,
			'sort'=>true
			);


	$fdd["xenum"] = array(
			'name'=>'Xenum',
			'select'=>'T',
			'type'=>'string',
			'maxlen'=>5,
			'nowrap'=>false,
			'values'=>array('enum1','enum2','enum3'),
			'sort'=>true
			);

	$fdd["xset"] = array(
			'name'=>'Xset',
			'select'=>'M',
			'type'=>'set',
			'maxlen'=>14,
			'nowrap'=>false,
			'values'=>array('set0','set1','set2'),
			'sort'=>true
			);
}


$opts['fdd'] = $fdd;

/*
   table-level filter capability

   if set, is included in the WHERE clause of any generated SELECT statement

example:
$opts['filters'] = "column1 like '%11%' AND column2<17";
);
 */

/*
   Triggers are files that are included (via require) that perform
   actions (before or after) X (inserts, updates, or deletes).

   'before' triggers are usually used to verify conditions prior to
   executing the main operation.

   'after' triggers are usually used to perform follow-on operations
   after the main operation.  For example, to update secondary tables
   to enforce referential integrity or to update aggregate tables.

   The operation sequence is this:  before, main, after.  If any
   operation fails, not only should the next operation(s) not be
   executed, but the previous ones are 'rolled back' as if they
   never happened.  If a database is not able to do this, it is
   not 'transaction-safe'.

   Triggers are risky in basic MySQL as there is no native transaction
   support--it is not transaction-safe by default.  There are
   transaction-safe table types in MySQL that can be conditionally built
   (see MySQL-Max), but phpMyEdit is currently not set up to support real
   transactions.  What that means is that if an operation fails, the
   database may be left in an intermediate and invalid state. 

   The programmer must understand and accept these risks prior to using
   the phpMyEdit triggers mechanism.

   If the triggers are used, they execute within the namespace or scope
   of the phpMyEdit class.

   They _must_ return true or false to indicate success or failure.
 */

/*
   $opts['triggers']['insert']['before']='comprehensiveTIB.inc';
   $opts['triggers']['insert']['after'] ='comprehensiveTIA.inc';
   $opts['triggers']['update']['before']='comprehensiveTUB.inc';
   $opts['triggers']['update']['after'] ='comprehensiveTUA.inc';
   $opts['triggers']['delete']['before']='comprehensiveTDB.inc';
   $opts['triggers']['delete']['after'] ='comprehensiveTDA.inc';
 */

/*
   logtable schema

   CREATE TABLE changelog (
   updated timestamp(14) NOT NULL,
   user varchar(50) default NULL,
   host varchar(255) NOT NULL default '',
   operation varchar(50) default NULL,
   tab varchar(50) default NULL,
   rowkey varchar(255) default NULL,
   col varchar(255) default NULL,
   oldval blob,
   newval blob
   );

   $opts['logtable']= 'changelog';
 */


# get the user's default language and use it if possible
$opts['language']= $HTTP_SERVER_VARS['HTTP_ACCEPT_LANGUAGE'];

//  and now the all-important call to phpMyEdit
//  warning - beware of case-sensitive operating systems!
require_once '../phpMyEdit.class.php';

$MyForm = new phpMyEdit($opts);

?>
