<!-- $Platon: phpMyEdit/doc/sgml/configuration.fields.sgml,v 1.2 2002/11/07 20:52:10 nepto Exp $ -->

<sect2 id="configuration.fields-overview">
<title id="configuration.fields-overview.title">Definition overview</title>
<para>

Fields will be displayed in table columns left to right on the screen in the
order in which they appear in the script.

</para>
<para>

Re-arrange the order of the arrays in order to alter the order in which columns
are displayed. Arrays look like this:

</para>
<para>

<example><title>Basic field definition</title>
<programlisting><![CDATA[
$fdd['col_name'] = array(
	'name'     => 'id',
	'select'   => 'T',
	'type'     => 'int',
	'maxlen'   => 10,
	'nowrap'   => false,
	'required' => true,
	'sort'     => true
);
]]></programlisting>
</example>

</para>
<para>

If the column is an auto-incremented record id, add the following option below
this array. Doing this will disable the display of an input box for the record
id when adding or updating records.

</para>
<para>

<example><title>Definition for autoincrement ID</title>
<programlisting><![CDATA[
$fdd['col_name']['options'] = 'R';
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.name">
<title id="configuration.name.title">Field name</title>
<para>

The title used for column headings, etc.

</para>
<para>

<example><title>Field name examples</title>
<programlisting><![CDATA[
$fdd['col_name']['name'] = 'ID';
$fdd['col_name']['name'] = 'Editorial';
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.select">
<title id="configuration.select.title">Filter selection</title>
<para>

Specify filter options for a field as text, drop-down, or multiple selection. If
a column is a SET type, then this is automatically 'M'.

</para>
<para>

<example><title>Filter selections</title>
<programlisting><![CDATA[
$fdd['col_name']['select'] = 'T'; // text
$fdd['col_name']['select'] = 'D'; // drop down
$fdd['col_name']['select'] = 'M'; // multiple selection
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.type">
<title id="configuration.type.title">Field type</title>
<para>

This $fdd['col_name']['type'] is generated by
<filename>phpMyEditSetup.php</filename> and indicates the MySQL field type (best
not edited). Type may appear as int, string, blob, etc.

</para>
</sect2>

<sect2 id="configuration.required">
<title id="configuration.required.title">Required fields</title>
<para>

If turned on, generate JavaScript to prevent null entries by the user.

</para>
<para>

<example><title>Required fields</title>
<programlisting><![CDATA[
$fdd['col_name']['required'] = true;
$fdd['col_name']['required'] = false;
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.sort">
<title id="configuration.sort.title">Field sorting</title>
<para>

Allow users to sort the display on this column. Use "true" for enable, "false"
for disable.

</para>
<para>

<example><title>Field sorting</title>
<programlisting><![CDATA[
$fdd['col_name']['sort'] = true;
$fdd['col_name']['sort'] = false;
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.options">
<title id="configuration.options.title">Display options</title>
<para>

An optional parameter to control whether a field is displayed in the A(dd),
C(hange), (co)P(y), D(elete), V(iew), L(ist), or F(ilter) views.

</para>
<para>

Another possible display options are:

</para>
<para>

<example><title>Another display options</title>
<programlisting><![CDATA[
$fdd['col_name']['options'] = 'H'; // hidden field
$fdd['col_name']['options'] = 'P'; // password field
$fdd['col_name']['options'] = 'R'; // read-only field
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.width">
<title id="configuration.width.title">Field width</title>
<para>

An optional display width specification for a column.

<example><title>Input field widths</title>
<programlisting><![CDATA[
$fdd['col_name']['width'] = '100px';
$fdd['col_name']['width'] = ($fdd['col_name']['trimlen'] * 8).'px';
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.maxlen">
<title id="configuration.maxlen.title">Maximum field length</title>
<para>

Maximum length of input boxes displayed for add/edit/search records.

<example><title>Field size</title>
<programlisting><![CDATA[
$fdd['col_name']['maxlen'] = '100px';
]]></programlisting>
</example>

</para>
<para>

<!-- This should have its own section, shouldn't it? -->

If the above setting does not work for you, you are probably trying to change
textarea size. Than try something like:

</para>
<para>

<example><title>Textarea field height &amp; width</title>
<programlisting><![CDATA[
$fdd['col_name']['textarea']['rows'] = 1;
$fdd['col_name']['textarea']['cols'] = 40;
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.trimlen">
<title id="configuration.trimlen.title">Character length limit</title>
<para>

Limit the number of characters displayed. This is useful when a table scrolls
off the screen because many columns contain long strings.

</para>
<para>

<example><title>Character length limit</title>
<programlisting><![CDATA[
$fdd['col_name']['trimlen'] = 100;
]]></programlisting>
</example>

</para>
<para>

This is the PHP equivalent of:
if strlen(value) > trimlen, display substr(,0,trimlen-3).'...';

</para>
</sect2>

<sect2 id="configuration.nowrap">
<title id="configuration.nowrap.title">Wrapping</title>
<para>

Specify whether a field should get a NOWRAP when displayed in a table cell.

</para>
<para>

<example><title>Wrapping</title>
<programlisting><![CDATA[
$fdd['col_name']['nowrap'] = true;
$fdd['col_name']['nowrap'] = false;
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.mask">
<title id="configuration.mask.title">Print mask</title>
<para>

A string that is used by sprintf() to format field output.

</para>
<para>

<example><title>Print mask field definition</title>
<programlisting><![CDATA[
$fdd['col_name']['mask'] = '';
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.datemask">
<title id="configuration.datemask.title">Date mask</title>
<para>

A string that is used by date() to format date fields see PHP's date() for valid
formatting characters.

</para>
<para>

<example><title>Date mask field definition</title>
<programlisting><![CDATA[
$fdd['col_name']['datemask'] = 'r';
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.daterange">
<title id="configuration.daterange.title">Date range</title>
<para>

A range of numbers. Examples include:

</para>
<para>

<example><title>Date range field definition</title>
<programlisting><![CDATA[
$fdd['col_name']['daterange']['start'] = 1996;
$fdd['col_name']['daterange']['end'] = $fdd['col_name']['daterange']['start']+20;
]]></programlisting>
</example>

</para>
</sect2>

<sect2 id="configuration.URL">
<title id="configuration.URL.title">URL linking</title>
<para>

Make a field 'clickable' in the display as "http://" or "mailto:".

</para>
<para>

<!-- TODO: should be rewritten, URLprefix and similar was forgotten -->
<example><title>URL linking examples</title>
<programlisting><![CDATA[
$fdd['col_name']['URL'] = 'http:';
$fdd['col_name']['URLtarget'] ='_blank';
$fdd['col_name']['URL'] = 'mailto:';
$fdd['col_name']['URL'] is , e.g.:
$fdd['col_name']['URL'] = 'mailto:' or $fdd['col_name']['URL'] = 'http:';
$fdd['col_name']['URL'] = '$page?stuff';
]]></programlisting>
</example>

</para>
<para>

Note that the following are available as variables:

</para>
<para>

<variablelist><title>URL variables</title>

<varlistentry>
<term><varname>$key</varname></term>
<listitem><para>key field for record</para></listitem>
</varlistentry>
<varlistentry>
<term><varname>$name</varname></term>
<listitem><para>name of the field</para></listitem>
</varlistentry>
<varlistentry>
<term><varname>$value</varname></term>
<listitem><para>value of the field</para></listitem>
</varlistentry>
<varlistentry>
<term><varname>$page</varname></term>
<listitem><para>this HTML page</para></listitem>
</varlistentry>
<varlistentry>
<term><varname>$row</varname></term>
<listitem><para>mysql_fetch_assoc() for this row</para></listitem>
</varlistentry>

</variablelist>

</para>
</sect2>

<sect2 id="configuration.values">
<title id="configuration.values.title">Field values</title>
<para>

<!-- TODO: values2 -->

Restricts user input to the specified constants. Examples appear below.

</para>
<para>

<example><title>Field values</title>
<programlisting><![CDATA[
$fdd['col_name']['values'] = array('','No','Yes');
$fdd['col_name']['values'] = array('','Yes','No');
$fdd['col_name']['values'] = array('0','1'); // default is 0
$fdd['col_name']['values'] = array('A','B','C'); // default is A
$fdd['col_name']['values'] = array('No','Yes'); // default is No
$fdd['col_name']['values'] = array('Yes','No'); // default is Yes
$fdd['col_name']['values'] = range(1,99);

$fdd['thisTableName']['values']['table']  = 'extractTable';
$fdd['thisTableName']['values']['column'] = 'extractColumn';

// For selecting more than one column in table lookup use construction like
// this one. Note that you may specify separators (divs) between fields as well.
$fdd['col_name']['values']['description']['columns']['1'] = 'desc_column_1';
$fdd['col_name']['values']['description']['columns']['2'] = 'desc_column_2';
$fdd['col_name']['values']['description']['divs']['1'] = ' ';
]]></programlisting>
</example>

<!-- this sh*t must be DocBook'ed

$fdd['col_name']['values']['table'] and $fdd['col_name']['values']['column'] restricts user
input to the values found in the specified column of another table.
 The optional ['values']['description'] field allows the value(s) displayed
 to the user to be different to those in the ['values']['column'] field.
 This is useful for giving more meaning to column values.  There are two main
 options when using the ['values']['description'] field. These are whether you
 want to use a single, or multiple field in your description.  To apply single,
 you need to use:
 $fdd['col_name']['values']['description'] = 'desc_column'
 This may be used, with no other options, and will simply display the description
 for the corresponding value.
 For Multiple, use:
 $fdd['col_name']['values']['description']['columns']['1'] = 'desc_column_1'
 $fdd['col_name']['values']['description']['divs']['1']    = ' '
 $fdd['col_name']['values']['description']['columns']['2'] = 'desc_column_2'
 The 'div' component is what will be used as a divider between the columns
 in the display.  You don't need to define the last 'div' field if it isn't
 required.  So, for example...if you have a series of people in a
 table, with a separate column for id, first name, and last name, you could
 use:
$fdd['col_name']['values']['db']='mydb' *optional if table is in another database*
$fdd['col_name']['values']['table']='mytable'
 $fdd['col_name']['values']['column']='id'
 $fdd['col_name']['values']['description']['columns']['1']='name_last'
 $fdd['col_name']['values']['description']['divs']['1']   =', '
 $fdd['col_name']['values']['description']['columns']['2']='name_first'
$fdd['col_name']['values']['filters']='idcolumn in (1,2,3)' *optional WHERE clause*
 $fdd['col_name']['values']['orderby']='last_name' *optional ORDER BY clause*
if a column is either SET or ENUM type, then the values are put in
by PME Setup.

-->

</para>
</sect2>

<sect2 id="configuration.calculated-expressions">
<title id="configuration.calculated-expressions.title">Calculated expressions</title>
<para>

<example><title>Calculated expressions</title>
<programlisting><![CDATA[
$fdd['other']['name']='Col Header';
$fdd['other']['expression']='onHand-ordered';
$fdd['other']['sort']='T:!';
$fdd['other']['select']='T';
$fdd['other']['type']='int';
]]></programlisting>
</example>

</para>
<para>

<itemizedlist>
<listitem><para>
'other' can be anything, but needs to be unique within the list of $fdd keys
</para></listitem>
<listitem><para>
'expression' can be any valid MySQL expression
</para></listitem>
<listitem><para>
'type' should reflect the results of the expression, e.g. 'int' or 'string'
</para></listitem>
</itemizedlist>

</para>
<para>

All other options work as with other, normal columns. This kind of column is
always read-only.

</para>
</sect2>
  
